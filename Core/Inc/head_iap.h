/**
 ******************************************************************************
 * File Name          : head_iap.h
 * Description        : This file is generated by 위대한 송 인재 on Feb 7, 2025
 ******************************************************************************
 *
 * COPYRIGHT(c) 2024 LMS Co. Ltd.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */


#ifndef INC_HEAD_HEAD_IAP_H_
#define INC_HEAD_HEAD_IAP_H_

#include "main.h"

/* Exported macro ------------------------------------------------------------*/
#define IS_CAP_LETTER(c)    (((c) >= 'A') && ((c) <= 'F'))
#define IS_LC_LETTER(c)     (((c) >= 'a') && ((c) <= 'f'))
#define IS_09(c)            (((c) >= '0') && ((c) <= '9'))
#define ISVALIDHEX(c)       (IS_CAP_LETTER(c) || IS_LC_LETTER(c) || IS_09(c))
#define ISVALIDDEC(c)       IS_09(c)
#define CONVERTDEC(c)       (c - '0')

#define CONVERTHEX_ALPHA(c) (IS_CAP_LETTER(c) ? ((c) - 'A'+10) : ((c) - 'a'+10))
#define CONVERTHEX(c)       (IS_09(c) ? ((c) - '0') : CONVERTHEX_ALPHA(c))

#define IAP_PKT_TX_BUFF_SIZE		2048

#define	YMODEM_SOH_PKT_DATA_SIZE	128U
#define	YMODEM_STX_PKT_DATA_SIZE	1024U
#define	IAP_VALID_CODE				0xAA55AA55U
#define	IAP_INVALID_CODE			~IAP_VALID_CODE
#define IAP_STATUS_INFO_ADDR		ADDR_FLASH_SECTOR_11

#define ASCII_ESC		0x1B

/* Exported constants --------------------------------------------------------*/
/* Packet structure defines */
#define PACKET_HEADER_SIZE      ((uint32_t)3)
#define PACKET_DATA_INDEX       ((uint32_t)4)
#define PACKET_START_INDEX      ((uint32_t)1)
#define PACKET_NUMBER_INDEX     ((uint32_t)2)
#define PACKET_CNUMBER_INDEX    ((uint32_t)3)
#define PACKET_TRAILER_SIZE     ((uint32_t)2)
#define PACKET_OVERHEAD_SIZE    (PACKET_HEADER_SIZE + PACKET_TRAILER_SIZE)
#define PACKET_SIZE             ((uint32_t)128)
#define PACKET_1K_SIZE          ((uint32_t)1024)
#define IAP_MSG_LENGTH_MAX		(256*5)

/* /-------- Packet in IAP memory ------------------------------------------\
 * | 0      |  1    |  2     |  3   |  4      | ... | n+4     | n+5  | n+6  |
 * |------------------------------------------------------------------------|
 * | unused | start | number | !num | data[0] | ... | data[n] | crc0 | crc1 |
 * \------------------------------------------------------------------------/
 * the first byte is left unused for memory alignment reasons                 */

#define FILE_NAME_LENGTH        ((uint32_t)64)
#define FILE_SIZE_LENGTH        ((uint32_t)16)

#define SOH                     ((uint8_t)0x01)  /* start of 128-byte data packet */
#define STX                     ((uint8_t)0x02)  /* start of 1024-byte data packet */
#define EOT                     ((uint8_t)0x04)  /* end of transmission */
#define ACK                     ((uint8_t)0x06)  /* acknowledge */
#define NAK                     ((uint8_t)0x15)  /* negative acknowledge */
#define CA                      ((uint32_t)0x18) /* two of these in succession aborts transfer */
#define CRC16                   ((uint8_t)0x43)  /* 'C' == 0x43, request 16-bit CRC */
#define NEGATIVE_BYTE           ((uint8_t)0xFF)

#define ABORT1                  ((uint8_t)0x41)  /* 'A' == 0x41, abort by user */
#define ABORT2                  ((uint8_t)0x61)  /* 'a' == 0x61, abort by user */

#define NAK_TIMEOUT             ((uint32_t)0x100000)
#define DOWNLOAD_TIMEOUT        ((uint32_t)1000) /* One second retry delay */
#define MAX_ERRORS              ((uint32_t)5)

#define	SOH_REQ_TIMEOUT			TIMEOUT_1_SEC
#define SOH_PACKET_SIZE			133
#define STX_PACKET_SIZE			(PACKET_1K_SIZE + PACKET_HEADER_SIZE + PACKET_TRAILER_SIZE)

typedef enum {
	IAP_MSG_BASE = 0,
	IAP_MSG_SOH_REQ_TIMEOUT,
	IAP_MSG_YMODEM_PKT,
	IAP_MSG_TEST_PKT,
	IAP_MSG_END,
} IAP_Msg_type_t;

typedef struct {
	IAP_Msg_type_t		type;
	WorkModule_Entity_t	dst;
	WorkModule_Entity_t	src;
	uint8_t				dummy;
	uint16_t			len;
} IAP_msg_head_t;

typedef struct {
	IAP_msg_head_t 		head;
	union {
		void			*mpool;
	} body;
} iap_msg_t;

typedef enum {
	IAP_STATE_SOH = 0,
	IAP_STATE_STX,
	IAP_STATE_END,
} iap_state_t;

typedef enum {
	YPKT_EVENT_SOH = 0,
	YPKT_EVENT_STX,
	YPKT_EVENT_CAN,
	YPKT_EVENT_EOT,
	YPKT_EVENT_SPL,
	YPKT_EVENT_END,
} ypkt_event_t;

typedef struct {
	uint8_t			type;
	uint8_t			seq;
	uint8_t			seq_oc;
} ymodem_packet_t;

typedef struct {
	uint8_t			type;		//SOH
	uint8_t			seq;
	uint8_t			seq_oc;
	uint8_t			pkt_data[YMODEM_SOH_PKT_DATA_SIZE];
	uint8_t			crc_high8;
	uint8_t			crc_low8;
} soh_packet_t;

typedef struct {
	uint8_t			type;		// STX
	uint8_t			seq;
	uint8_t			seq_oc;
	uint8_t			pkt_data[YMODEM_STX_PKT_DATA_SIZE];
	uint8_t			crc_high8;
	uint8_t			crc_low8;
} stx_packet_t;

typedef struct {
	uint8_t			byte_0;		//CAN
	uint8_t			byte_1;
	uint8_t			byte_2;
	uint8_t			byte_3;
	uint8_t			byte_4;
	uint8_t			byte_5;
	uint8_t			byte_6;
	uint8_t			byte_7;
	uint8_t			byte_8;
	uint8_t			byte_9;
} can_packet_t;

typedef struct {
	bool			ypacket_ready_flag;
	uint16_t		ypacket_size;
	void			*mblockp;
} iap_ypacket_t;

typedef struct {
	uint32_t		iap_progress_counter;
	lfs_file_t		file;
	char 			file_name[FILE_NAME_LENGTH];
	uint32_t		file_size;
	uint32_t		stx_packet_counter;
	uint32_t		stx_byte_counter;
	uint32_t		soh_byte_counter;
	uint8_t 		*Iap_Rx_mpool;
	uint8_t 		seq_no;
	iap_state_t 	iap_state;
	uint32_t 		total_packet_count;
} iapObj_t;

void ymodem_packet_handler(ymodem_packet_t *yPacketp, uint16_t size);
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size);


#define TX_TIMEOUT          ((uint32_t)100)

typedef bool (* iap_msg_func)(iap_msg_t *);
typedef bool (* iap_se_func)(ymodem_packet_t *, uint16_t);
#define FW_UPGRADE_HISTORY_FILE		"fw_upgrade_history.txt"


#endif /* INC_HEAD_HEAD_IAP_H_ */
