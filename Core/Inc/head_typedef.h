/**
 ******************************************************************************
 * File Name          : head_typedef.h
 * Description        : This file is generated by 위대한 송 인재 on Jul 30, 2025
 ******************************************************************************
 *
 * COPYRIGHT(c) 2024 DSN Co. Ltd.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */


#ifndef INC_HEAD_TYPEDEF_H_
#define INC_HEAD_TYPEDEF_H_


/*******************************************************************************
 LEDBAR Object
 *******************************************************************************/
typedef bool (* ledbar_color_set_func)(ledbar_color_t ledbar_color);

typedef struct {
	ledbar_color_t			ledbar_color;
	ledbar_color_set_func	ledbar_color_set;
} ledbarObj_t;

/*******************************************************************************
 SIREN Object
 *******************************************************************************/
typedef bool (* siren_set_func)(siren_on_off_t siren);

typedef struct {
	siren_on_off_t			siren_flag;
	siren_set_func			siren_set;
} sirenObj_t;

/*******************************************************************************
 LTE Object
 *******************************************************************************/
typedef bool (* lte_set_func)(lte_on_off_t lte);

typedef struct {
	lte_on_off_t			lte_flag;
	lte_set_func			lte_set;
} lteObj_t;

/*******************************************************************************
 PTC Object
 *******************************************************************************/
typedef bool (* ptc_set_func)(ptc_on_off_t ptc);

typedef struct {
	ptc_on_off_t			ptc_flag;
	ptc_set_func			ptc_set;
} ptcObj_t;

/*******************************************************************************
 YUCHAR Object
 *******************************************************************************/
typedef bool (* yuchar_set_func)(yuchar_on_off_t yuchar);

typedef struct {
	yuchar_on_off_t			yuchar_flag;
	yuchar_set_func			yuchar_set;
} yucharObj_t;

/*******************************************************************************
 MUCHAR1 Object
 *******************************************************************************/
typedef bool (* muchar1_set_func)(muchar1_on_off_t muchar1);

typedef struct {
	muchar1_on_off_t		muchar1_flag;
	muchar1_set_func		muchar1_set;
} muchar1Obj_t;

/*******************************************************************************
 MUCHAR2 Object
 *******************************************************************************/
typedef bool (* muchar2_set_func)(muchar2_on_off_t muchar2);

typedef struct {
	muchar2_on_off_t		muchar2_flag;
	muchar2_set_func		muchar2_set;
} muchar2Obj_t;

/*******************************************************************************
 FAN Object
 *******************************************************************************/
typedef bool (* fan_set_func)(fan_on_off_t fan);

typedef struct {
	fan_on_off_t			fan_flag;
	fan_set_func			fan_set;
} fanObj_t;

/*******************************************************************************
 INVERTER Object
 *******************************************************************************/
typedef bool (* inverter_set_func)(inverter_on_off_t inverter);

typedef struct {
	inverter_on_off_t			inverter_flag;
	inverter_set_func			inverter_set;
} inverterObj_t;

/*******************************************************************************
 SPEAKER Object
 *******************************************************************************/
typedef bool (* speaker_set_func)(speaker_on_off_t speaker);

typedef struct {
	speaker_on_off_t			speaker_flag;
	speaker_set_func			speaker_set;
} speakerObj_t;

/*******************************************************************************
 LCD Object
 *******************************************************************************/
typedef bool (* lcd_set_func)(lcd_on_off_t lcd);

typedef struct {
	lcd_on_off_t				lcd_flag;
	lcd_set_func				lcd_set;
} lcdObj_t;


/*******************************************************************************
 LAMP Object
 *******************************************************************************/
typedef bool (* lamp_set_func)(lamp_level_t lamp);

typedef struct {
	lamp_level_t			lamp_level;
	lamp_set_func			lamp_set;
} lampObj_t;

/*******************************************************************************
 SMB Control Object
 *******************************************************************************/
typedef struct {
	ledbarObj_t			ledbarObj;
	sirenObj_t			sirenObj;
	lteObj_t			lteObj;
	ptcObj_t			ptcObj;
	yucharObj_t			yucharObj;
	muchar1Obj_t		muchar1Obj;
	muchar2Obj_t		muchar2Obj;
	fanObj_t			fanObj;
	lampObj_t			lampObj;
	inverterObj_t		inverterObj;
	speakerObj_t		speakerObj;
	lcdObj_t			lcdObj;
} SMB_ControlObj_t;


/*******************************************************************************
 SMBManiObj Object
 *******************************************************************************/
typedef struct {
	ledbar_color_t			ledbar_color;
	siren_on_off_t			siren_flag;
	lte_on_off_t			lte_flag;
	// charger 삭제
	ptc_on_off_t			ptc_flag;
	lamp_level_t			lamp_level;
	inverter_on_off_t		inverter_flag;
	lcd_on_off_t			lcd_flag;
	yuchar_on_off_t			yuchar_flag;
	muchar1_on_off_t		muchar1_flag;
	muchar2_on_off_t		muchar2_flag;
	fan_on_off_t			fan_flag;
} SMB_ManiObj_t;

/*******************************************************************************************
 * osTimer
 ******************************************************************************************/
typedef void (* func_timeout_cb)(void *);

typedef struct {
	osTimerId_t			osTimerId;
	osTimerType_t		osTimerType;
	uint32_t			timeout_tick;
	func_timeout_cb		timeout_cb;
} osTimerEntry_t;

typedef enum {
	TMR_IDX_BEGIN = 0,
	TMR_IDX_LED_ACT_TOGGLE = TMR_IDX_BEGIN,
	TMR_IDX_UPTIME_COUNT,
	TMR_IDX_CLI_CONSOLE_SCAN,
	TMR_IDX_ADC_READ,

	TMR_IDX_SMB_DATA_SHOW,
	TMR_IDX_SMB_STATUS_REPORT,
	TMR_IDX_SMB_IAP_REQUEST,
	TMR_IDX_SMB_PERI_OPER,
	TMR_IDX_EMER_BTN,
	TMR_IDX_MOTION_LATENCY,
	TMR_IDX_END,
} osTimerIndex_t;

/*******************************************************************************************
 * Interrupt counter
 ******************************************************************************************/
typedef struct {
	uint32_t 		RCC_Intr_count;
	uint32_t 		DMA1_Chan_1_count;
	uint32_t 		DMA1_Chan_3_count;
	uint32_t 		DMA1_Chan_4_count;
	uint32_t 		DMA1_Chan_6_count;
	uint32_t 		DMA1_Chan_7_count;
	uint32_t 		ADC1_2_count;
	uint32_t 		EXTI9_5_count;
	uint32_t 		TIM1_UP_16_count;
	uint32_t 		TIM4_count;
	uint32_t 		SPI1_count;
	uint32_t 		USART1_count;
	uint32_t 		USART2_count;
	uint32_t 		USART3_count;
	uint32_t 		EXTI15_10_count;
	uint32_t 		USART4_count;
	uint32_t 		DMA2_Chan_3_count;		// IAP Tx
	uint32_t 		DMA2_Chan_5_count;		// IAP Rx
} SMB_IntrObj_t;

// *****************************************************************************
// Message type for MANAGER thread
// *****************************************************************************
#define	IMS_RX_BUF_SIZE			10		// Sensor data = 0xA5, 0xA5, data[0], data[1], data[2], 0x5A, 0x5A

typedef struct {
	MANAGER_Msg_type_t	type;
	WorkModule_Entity_t	dst;
	WorkModule_Entity_t	src;
	uint8_t				len;
} manager_msg_head_t;

typedef struct {
	uint8_t				Byte[10];
} manager_msg_body_t;

typedef struct {
	manager_msg_head_t 	head;
	manager_msg_body_t	body;
} manager_msg_t;

typedef bool (* manager_msg_func)(manager_msg_t *);


// *****************************************************************************
// ADC
// *****************************************************************************
/* Definitions of data related to this example */
/* Full-scale digital value with a resolution of 12 bits (voltage range     */
/* determined by analog voltage references Vref+ and Vref-,                 */
/* refer to reference manual).                                              */
#define DIGITAL_SCALE_12BITS             ((uint32_t) 0xFFF)

/* Init variable out of ADC expected conversion data range */
#define VAR_CONVERTED_DATA_INIT_VALUE    (DIGITAL_SCALE_12BITS + 1)

/* Definition of ADCx conversions data table size */
#define ADC_CONVERTED_DATA_BUFFER_SIZE   ((uint32_t)  8)

typedef struct {
	/* Variables for ADC conversion data computation to physical values */
	__IOM uint16_t YUI;			/* Value of voltage on GPIO pin (on which is mapped ADC channel) calculated from ADC conversion data (unit: mV) */
	__IOM uint16_t MUI1;		/* Value of voltage on GPIO pin (on which is mapped ADC channel) calculated from ADC conversion data (unit: mV) */
	__IOM uint16_t MUI2;		/* Value of voltage on GPIO pin (on which is mapped ADC channel) calculated from ADC conversion data (unit: mV) */
	__IOM int16_t AEDT;			/* Value of voltage on GPIO pin (송사장님이 준 table 로 직접 변환하며 영하의 경우가 있어서 uint16_t => int16_t 로 바꿈.		*/
	__IOM uint16_t CDS;			/* Value of voltage on GPIO pin (on which is mapped ADC channel) calculated from ADC conversion data (unit: mV) */
	__IOM int16_t TEMP;		/* Value of temperature calculated from ADC conversion data (unit: degree Celsius) */
	__IOM uint16_t VBAT;		/* Value of internal voltage reference VrefInt calculated from ADC conversion data (unit: mV) */
	__IOM uint16_t VREF;		/* Value of analog reference voltage (Vref+), connected to analog voltage supply Vdda, calculated from ADC conversion data (unit: mV) */
	uint16_t yui_raw_data;
	uint16_t mui1_raw_data;
	uint16_t mui2_raw_data;
	uint16_t aedt_raw_data;
	uint16_t cds_raw_data;
} SMB_adc_value_t;

// *****************************************************************************
// Luminance
// *****************************************************************************
typedef struct {
	uint8_t				luminance;
	uint8_t				bright_dark_boundary;
	luminance_t			bright_or_dark;
} smb_luminance_t;

// *****************************************************************************
// Motion
// *****************************************************************************
typedef struct {
	motion_t			motion;
} smb_motion_t;

/*******************************************************************************
 SMBConfig Object
 *******************************************************************************/
typedef struct {
	uint32_t 			machine_serial_no;
	smb_work_mode_t		work_mode;
	smb_banner_t		banner;				// booting 할 때 console 에 표시되는 그림 선택
	char				site_address[SMB_CONFIG_STRING_SIZE_MAX];
	char				install_worker[SMB_CONFIG_STRING_SIZE_MAX];
	RTC_DateTypeDef 	install_Date;
	RTC_DateTypeDef 	manufacture_Date;
	RTC_DateTypeDef 	fw_update_Date;
	char				running_fw[SMB_CONFIG_STRING_SIZE_MAX];

	RTC_TimeTypeDef		lamp_on_duty;		// lamp 를 켜도 되는 시작 시간
	RTC_TimeTypeDef		lamp_off_duty;		// lamp 를 꺼야 하는 시작 시간
	uint16_t			sonic_threshold;	// sonic data 기준. 모델마다 값이 다를 수 있기 때문에 현장에서 설치할 때 sonic raw data 를 보고 설정.
	uint8_t				bright_dark_boundary;
	uint32_t			motion_latency;
	uint32_t			siren_on_time;
	int16_t				aedt_high_mark;
	int16_t				aedt_normal_high;
	int16_t				aedt_normal_low;
	int16_t				aedt_low_mark;
} SMB_ConfigObj_t;

typedef struct {
	bool				emer_by_button;		// Emergency 버튼을 눌러서 발생한 emergency 상황
	bool				emer_by_fire_door;	// Fire door 가 열려서 발생한 emergency 상황
	bool				emer_by_aed_door;	// AED door 가 열려서 발생한 emergency 상황
	bool				emer_by_flood;		// 침수가 발생해서 발생한 emergency 상황
} EMERGENCY_by_t;

/*******************************************************************************
 fake AEDT
 *******************************************************************************/
typedef struct {
	fake_AEDT_flag		IsFaking;			//
	fake_AEDT_dir		fake_dir;			//
	int16_t			fake_temp;			//
} fake_AEDT_t;

/*******************************************************************************
 SMBStatus Object
 *******************************************************************************/
typedef struct {
	uint32_t 			CPUID;
	uint32_t			implementer;
	uint32_t			variant;
	uint32_t			constant;
	uint32_t			partno;
	uint32_t			version;
	uint32_t 			package_type;
	uint32_t 			uid0;
	uint32_t 			uid1;
	uint32_t 			uid2;

	uint32_t			hw_version;
	char				fw_version[64];
	RTC_DateTypeDef 	launchDate;
	RTC_TimeTypeDef 	launchTime;
	RTC_DateTypeDef 	currentDate;
	RTC_TimeTypeDef 	currentTime;
	uint64_t			uptime_counter;
	uint32_t			ims_packet_error_counter;
	smb_luminance_t		smb_luminance;
	smb_motion_t		smb_motion;
	bool				smb_data_show_flag;
	bool				rb_working;
	bool				manual_mode;		// console command 로 제어할 때..
	EMERGENCY_by_t		EMERGENCY;
	emer_btn_status_t	emer_btn_status;
	aed_door_status_t	aed_door_status;
	fire_door_status_t	fire_door_status;
	flood_status_t		flood_status;
	fake_AEDT_t			fake_AEDT;		// PTC, FAN 이 온도에 따라서 정확하게 동작하는지 확인하려고 만듬..

} SMB_StatusObj_t;

/*******************************************************************************
 SMBStatus_backup Object
 *******************************************************************************/
typedef struct {
	ledbar_color_t			ledbar_color;
	siren_on_off_t			siren_flag;
	lamp_level_t			lamp_level;
	speaker_on_off_t		speaker_flag;
} SMB_Control_Backup_Obj_t;

/*******************************************************************************
 RB thread message format
 *******************************************************************************/
#define RB_REPORT_HISTORY_FILE		"rb_report_history.txt"
typedef struct {
	uint8_t			type;
	uint8_t			len;
	uint8_t			body[RBERRY_BODY_LENGTH]; // 8 - 2 - 2 = 4
	uint8_t			checksum;
	uint8_t			end_marker;
} rb_report_t;

typedef struct {
	uint8_t			type;
	uint8_t			len;
	uint8_t			body[RBERRY_BODY_LENGTH]; // 8 - 2 - 2 = 4
	uint8_t			checksum;
	uint8_t			end_marker;
} rb_command_t;

typedef struct {
	RB_Msg_type_t		type;
	WorkModule_Entity_t	dst;
	WorkModule_Entity_t	src;
	uint8_t				len;
} RB_msg_head_t;

typedef struct {
	uint8_t				Byte[RB_MSG_SIZE];
} rb_msg_body_t;

typedef struct {
	RB_msg_head_t 		head;
	rb_command_t		rb_command;
} rb_msg_t;

typedef struct {
	uint32_t 			emer_btn	: 1;	// emer. btn press or released
	uint32_t 			aed_door	: 1;	// aed door open or closed
	uint32_t 			fire_door	: 1;	// fire door open or closed
	uint32_t 			flood		: 1;	// foolding happen or not
	uint32_t 			siren		: 1;	// siren on or not
	uint32_t 			lamp		: 1;	// siren on or not
	uint32_t 			ltepwr		: 1;	// siren on or not
	uint32_t 			ptc			: 1;	// ptc on or not
	uint32_t 			fan			: 1;	// fan on or not
	uint32_t 			yuchar		: 1;	// yuchar on or not
	uint32_t 			muchar1		: 1;	// muchar1 on or not
	uint32_t 			muchar2		: 1;	// muchar2 on or not
	uint32_t 			charger		: 1;	// charger on or not
	uint32_t 			inverter	: 1;	// inverter on or not
	uint32_t 			rsvd		: 18;	// rsvd
} rb_sensor_status_t;

typedef bool (* rb_msg_func)(rb_msg_t *);








#endif /* INC_HEAD_TYPEDEF_H_ */
